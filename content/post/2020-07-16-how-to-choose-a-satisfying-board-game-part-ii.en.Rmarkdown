---
title: How to choose a satisfying board game? Part II
author: James Diu
date: '2020-07-16'
slug: how-to-choose-a-satisfying-board-game-part-ii
categories:
  - boardgame
  - R
tags: []
backtotop: no
toc: no
draft: TRUE
---

```{r, include=FALSE}
library(data.table)
library(tidyverse)
library(stringr)
library(corrplot)
library(gridExtra)
library(splitstackshape)
library(treemap)
library(entropy)
library(tidyselect)
```


```{r data_cleaning, message=FALSE}
games_Jan2018 <- read_csv("data/games_Jan2018.csv")
df <- games_Jan2018
# These columns should have missing value instead of 0, replace with NA
list <- c("minplayers", "maxplayers", "playingtime","minplaytime", "maxplaytime")
df[list][df[list]==0]<-NA

# Update data by visiting BGG for accurate information
df[df$id==234768,]$minplayers <- 2

df[df$id==235285,]$minplayers <- 2
df[df$id==235285,]$maxplayers <- 6

df[df$id==75294,]$minplayers <- 2
df[df$id==75294,]$maxplayers <- 20

df<- df %>% 
  # filter games with BGG rating
  filter(users_rated>=30) %>% 
  mutate(
    # assign expansion as 1, boardgame as 0
    type = ifelse(type == "boardgame", 0, 1),
    # switch the value for those minplaytime > maxplaytime 
    maxplaytime = ifelse(maxplaytime<minplaytime, minplaytime, maxplaytime),
    minplaytime = ifelse(minplaytime<playingtime, minplaytime, playingtime),
    # create age group
    age_group = ifelse(minage>14, "15+",
                       ifelse(minage>11, "12-14",
                              ifelse(minage>8, "9-11",
                                     ifelse(minage>5, "6-8","<6")))),
    age_group = factor(age_group, levels = c("<6", "6-8", "9-11","12-14","15+")),
    # create duration group
    duration = ifelse(playingtime < 30, "Instant",
                      ifelse(playingtime < 60, "Short",
                             ifelse(playingtime <120, "Normal",
                                    ifelse(playingtime < 180, "Long",
                                           ifelse(is.na(playingtime),
                                                  NA,"Extreme"))))),
    duration = factor(duration, 
                      levels = c("Instant", "Short", "Normal", "Long", "Extreme"))
    ) %>%
  # remove useless columns
  select(id, type, name, yearpublished, age_group, duration, 
         weight = average_weight, users_rated, BGG_rating = bayes_average_rating,
         types, categories, mechanics, designers)
```


```{r}
mec_tags <- cSplit(df %>% select(id, mechanics), 
                   splitCols = "mechanics",
                   direction = "long")
length(unique(mec_tags$mechanics))
```
```{r fig1_nmech_pie, echo=FALSE}
library(scales)
ggplot(mec_tags %>%
         group_by(id) %>%
         summarise(n_mech = n()) %>%
         group_by(n_mech) %>%
         summarise(count = n()) %>%
         arrange(desc(n_mech)) %>%
         mutate(n_mech = as.factor(n_mech),
                total = sum(count),
                prop = round(count / total * 100,2),
                ypos = cumsum(prop) - 0.5*prop),
       aes(x="", y=prop, fill=n_mech))+
  geom_bar(stat = "identity", width=1) +
  coord_polar("y", start = 0) +
  theme_void()+
  # geom_text(aes(y = ifelse(ypos>0.05, paste(ypos,"%"),""), 
  #               label = prop))+
  geom_text(aes(y = ypos, 
                label = ifelse(prop>5, paste(prop,"%"),"")),
            size = 3, hjust = 0.3)+
  ggtitle("Fig.1: Pie chart of the number of mechanics used")
```

```{r fig2_nmech_treemap, echo = FALSE}
n_mech_treemap <- treemap(as.data.frame(table(mec_tags$mechanics)), 
                        index = "Var1", vSize = "Freq",
                        title = "Fig.2: Mechanics frequency - Boardgames")
```


```{r fig3_mechrate_pie, echo=FALSE}
  ggplot(
mec_tags %>% left_join(df[c("id","users_rated", "BGG_rating")], by = "id") %>%
  filter(!is.na(mechanics)) %>%
  group_by(mechanics) %>%
  summarise(users_rated = mean(users_rated),
            BGG_mean = mean(BGG_rating),
            BGG_sd = sd(BGG_rating),
            count = n()) %>% 
  arrange(desc(BGG_mean)),
aes(x=reorder(mechanics,BGG_mean), y=BGG_mean, fill = count)
) +
  geom_bar(stat ="identity")+
  geom_errorbar(aes(ymin=BGG_mean-1.96*BGG_sd, ymax=BGG_mean+1.96*BGG_sd), width=.2) +
  scale_y_continuous(breaks = seq(1:7)) +
  coord_flip() +
  theme(axis.text.y = element_text(size = 6),
        axis.title.y = element_blank())+
  ggtitle("Fig.3: Averge BGG rating of mechanics")
```


```{r}
mec_dummy <- dcast(mec_tags, id ~ mechanics, function(x) 1, fill = 0) %>%
  left_join(df[c("id","BGG_rating")], by = "id")

fit <- lm(BGG_rating~.,data = mec_dummy %>% select(-id) %>%
            filter(BGG_rating != 0))
fits <- as.data.frame(fit$coefficients)
fits$mechanics <- as.factor(rownames(fits))
colnames(fits) <- c("coef","mechanics")
```


```{r}
ggplot(fits[-1,] %>% filter(mechanics != "`NA`"), aes(x=reorder(mechanics,coef),y=coef,fill=coef))+
  geom_bar(stat="identity")+
  coord_flip()+
  labs(title="Linear Model Coefficients for mechanics against rating",
       y="Coefficients",x="Mechanic")+
  scale_fill_gradient(low="red", high="green")+
  theme_light() +
  theme(axis.text.y = element_text(size = 6),
        axis.title.y = element_blank())

fits
```

