---
title: How to choose a satisfying board game? Part II
author: James Diu
date: '2020-07-16'
slug: how-to-choose-a-satisfying-board-game-part-ii
categories:
  - boardgame
  - R
tags: []
backtotop: no
toc: no
---

```{r, include=FALSE}
library(data.table)
library(tidyverse)
library(stringr)
library(corrplot)
library(gridExtra)
library(splitstackshape)
library(treemap)
library(entropy)
library(tidyselect)
```
```{r data_cleaning, include=FALSE}
games_Jan2018 <- read_csv("data/games_Jan2018.csv")
df <- games_Jan2018
# These columns should have missing value instead of 0, replace with NA
list <- c("minplayers", "maxplayers", "playingtime","minplaytime", "maxplaytime")
df[list][df[list]==0]<-NA

# Update data by visiting BGG for accurate information
df[df$id==234768,]$minplayers <- 2

df[df$id==235285,]$minplayers <- 2
df[df$id==235285,]$maxplayers <- 6

df[df$id==75294,]$minplayers <- 2
df[df$id==75294,]$maxplayers <- 20

df<- df %>% 
  # filter games with BGG rating
  filter(users_rated>=30) %>% 
  mutate(
    # assign expansion as 1, boardgame as 0
    type = ifelse(type == "boardgame", 0, 1),
    # switch the value for those minplaytime > maxplaytime 
    maxplaytime = ifelse(maxplaytime<minplaytime, minplaytime, maxplaytime),
    minplaytime = ifelse(minplaytime<playingtime, minplaytime, playingtime),
    # create age group
    age_group = ifelse(minage>14, "15+",
                       ifelse(minage>11, "12-14",
                              ifelse(minage>8, "9-11",
                                     ifelse(minage>5, "6-8","<6")))),
    age_group = factor(age_group, levels = c("<6", "6-8", "9-11","12-14","15+")),
    # create duration group
    duration = ifelse(playingtime < 30, "Instant",
                      ifelse(playingtime < 60, "Short",
                             ifelse(playingtime <120, "Normal",
                                    ifelse(playingtime < 180, "Long",
                                           ifelse(is.na(playingtime),
                                                  NA,"Extreme"))))),
    duration = factor(duration, 
                      levels = c("Instant", "Short", "Normal", "Long", "Extreme"))
    ) %>%
  # remove useless columns
  select(id, type, name, yearpublished, age_group, duration, 
         weight = average_weight, users_rated, BGG_rating = bayes_average_rating,
         types, categories, mechanics, designers)
```

```{r}
head(df)
```

